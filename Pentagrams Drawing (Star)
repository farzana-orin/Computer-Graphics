#include <GL/freeglut.h>
#include<stdio.h>
#include<math.h>
// The header file used to evaluate the code - begin
#include<opencv2/core/core.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<opencv2/imgproc/imgproc.hpp>
// The header file used to evaluate the code - end

struct point {

    double x, y;

};
float PI = 3.1415926f;
float R = 0.4f;
void myDisplay(void)
{
    //The point coordinates of the pentagram
    point A, B, C, D, E, A1, B1, C1, D1, E1, F;

    A.x = R * cos(90 * 2 * PI / 360) - 0.5;      A.y = R * sin(90 * 2 * PI / 360);
    B.x = R * cos(306 * 2 * PI / 360) - 0.5;     B.y = R * sin(306 * 2 * PI / 360);
    C.x = R * cos(162 * 2 * PI / 360) - 0.5;     C.y = R * sin(162 * 2 * PI / 360);
    D.x = R * cos(18 * 2 * PI / 360) - 0.5;      D.y = R * sin(18 * 2 * PI / 360);
    E.x = R * cos(234 * 2 * PI / 360) - 0.5;     E.y = R * sin(234 * 2 * PI / 360);


    A1.x = R * cos(90 * 2 * PI / 360) + 0.5;      A1.y = R * sin(90 * 2 * PI / 360);
    B1.x = R * cos(306 * 2 * PI / 360) + 0.5;     B1.y = R * sin(306 * 2 * PI / 360);
    C1.x = R * cos(162 * 2 * PI / 360) + 0.5;     C1.y = R * sin(162 * 2 * PI / 360);
    D1.x = R * cos(18 * 2 * PI / 360) + 0.5;      D1.y = R * sin(18 * 2 * PI / 360);
    E1.x = R * cos(234 * 2 * PI / 360) + 0.5;     E1.y = R * sin(234 * 2 * PI / 360);
    F.x  = R * cos(90 * 2 * PI / 360) + 0.5;      F.y  = ((D1.y - E1.y) / (D1.x - E1.x)) * (A1.x - D1.x) + D1.y;
    
    // Please add your code here
    /********** Begin ********/
    glClearColor(0.0,0.0,0.0,0.0);
    glColor3f(1.0f,0.0f,0.0f);
    glBegin(GL_LINE_LOOP);//begin drawing of polygon
      glVertex2f(A.x,A.y);
      glVertex2f(B.x,B.y);
      glVertex2f(C.x,C.y);
      glVertex2f(D.x,D.y);
      glVertex2f(E.x,E.y);


    glEnd();//end drawing of polygon
    
    glColor3f(0.0f,1.0f,1.0f);
    
    glBegin(GL_POLYGON);//begin drawing of polygon

      glVertex2f(A1.x,A1.y);
      glVertex2f(E1.x,E1.y);
      glVertex2f(F.x,F.y);
      glVertex2f(B1.x,B1.y);

    glEnd();//end drawing of polygon
    
    glBegin(GL_POLYGON);//begin drawing of polygon
       glVertex2f(D1.x,D1.y);
       glVertex2f(C1.x,C1.y);
 
       glVertex2f(F.x,F.y);
      

    glEnd();//end drawing of polygon


    /********** End **********/

    glFlush();
}


int main(int argc, char* argv[])
{
    GLubyte* pPixelData = (GLubyte*)malloc(400 * 400 * 3);
    GLint viewport[4] = { 0 };
    glutInit(&argc, argv);
    glutInitWindowPosition(100, 100);
    glutInitWindowSize(400, 400);
    glutCreateWindow("Hello OpenGL!");
    glutDisplayFunc(&myDisplay);

    glutMainLoopEvent();



    //The following is the evaluation code, which has nothing to do with the content of this experiment. Please do not modify it//
    glReadBuffer(GL_FRONT);
    glPixelStorei(GL_UNPACK_ALIGNMENT, 4);
    glGetIntegerv(GL_VIEWPORT, viewport);
    glReadPixels(viewport[0], viewport[1], viewport[2], viewport[3], GL_RGB, GL_UNSIGNED_BYTE, pPixelData);

    cv::Mat img;
    std::vector<cv::Mat> imgPlanes;
    img.create(400, 400, CV_8UC3);
    cv::split(img, imgPlanes);

    for (int i = 0; i < 400; i++) {
        unsigned char* plane0Ptr = imgPlanes[0].ptr<unsigned char>(i);
        unsigned char* plane1Ptr = imgPlanes[1].ptr<unsigned char>(i);
        unsigned char* plane2Ptr = imgPlanes[2].ptr<unsigned char>(i);
        for (int j = 0; j < 400; j++) {
            int k = 3 * (i * 400 + j);
            plane2Ptr[j] = pPixelData[k];
            plane1Ptr[j] = pPixelData[k + 1];
            plane0Ptr[j] = pPixelData[k + 2];
        }
    }
    cv::merge(imgPlanes, img);
    cv::flip(img, img, 0);
    cv::namedWindow("openglGrab");
    cv::imshow("openglGrab", img);
    //cv::waitKey();
    cv::imwrite("../img_step3/test.jpg", img);
    return 0;
}
