
#include <GL/freeglut.h>
#include<stdio.h>

// The header file used to evaluate the code - start
#include<opencv2/core/core.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<opencv2/imgproc/imgproc.hpp>
// The header file used to evaluate the code - end

void myDisplay(void)
{
    // Please add your code here
    /********** Begin ********/
    glClearColor(0.0,0.0,0.0,0.0);
    glPointSize(5.0f);
    glBegin(GL_POINTS);//start drawing triangles
      
      glColor3f(1.0f,0.0f,0.0f);
      glVertex2f(-0.6f,0.0f);
      
      glColor3f(0.0f,1.0f,0.0f);
      glVertex2f(-0.2f,0.0f);

      glColor3f(0.0f,0.0f,1.0f);
      glVertex2f(-0.4f,0.4f);

    glEnd();

    glBegin(GL_LINES);
      
      glColor3f(1.0f,1.0f,1.0f);
      glVertex2f(0.2f,0.0f);
      glVertex2f(0.6f,0.4f);
      glVertex2f(0.2f,0.4f);
      glVertex2f(0.6f,0.0f);

    glEnd();

    




    /********** End **********/

    glFlush();
}

int main(int argc, char* argv[])
{
    GLubyte* pPixelData = (GLubyte*)malloc(400 * 400 * 3);
    GLint viewport[4] = { 0 };
    glutInit(&argc, argv);
    glutInitWindowPosition(100, 100);
    glutInitWindowSize(400, 400);
    glutCreateWindow("Hello OpenGL!");
    glutDisplayFunc(&myDisplay);
    glutMainLoopEvent();



    //The following is the evaluation code, which has nothing to do with the content of this experiment. Please do not modify it//
    glReadBuffer(GL_FRONT);
    glPixelStorei(GL_UNPACK_ALIGNMENT, 4);
    glGetIntegerv(GL_VIEWPORT, viewport);
    glReadPixels(viewport[0], viewport[1], viewport[2], viewport[3], GL_RGB, GL_UNSIGNED_BYTE, pPixelData);

    cv::Mat img;
    std::vector<cv::Mat> imgPlanes;
    img.create(400, 400, CV_8UC3);
    cv::split(img, imgPlanes);

    for (int i = 0; i < 400; i++) {
        unsigned char* plane0Ptr = imgPlanes[0].ptr<unsigned char>(i);
        unsigned char* plane1Ptr = imgPlanes[1].ptr<unsigned char>(i);
        unsigned char* plane2Ptr = imgPlanes[2].ptr<unsigned char>(i);
        for (int j = 0; j < 400; j++) {
            int k = 3 * (i * 400 + j);
            plane2Ptr[j] = pPixelData[k];
            plane1Ptr[j] = pPixelData[k + 1];
            plane0Ptr[j] = pPixelData[k + 2];
        }
    }
    cv::merge(imgPlanes, img);
    cv::flip(img, img, 0);
    cv::namedWindow("openglGrab");
    cv::imshow("openglGrab", img);
    //cv::waitKey();
    cv::imwrite("../img_step1/test.jpg", img);
    return 0;
}
