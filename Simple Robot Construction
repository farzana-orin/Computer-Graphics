#include <GL/freeglut.h>
#include<stdio.h>

// The header file used to evaluate the code - begin
#include<opencv2/core/core.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<opencv2/imgproc/imgproc.hpp>
// The header file used to evaluate the code - end
GLint winWidth = 500, winHeight =500 ; 	      

void init(void)
{
    glClearColor(0.0, 0.0, 0.0, 0.0);
}
void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT);

    glLoadIdentity();
    gluLookAt(2.0, 2.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);        

    // Please modify the code here
    /********** Begin ********/   
    //White Neck
    glPushMatrix();
    glTranslatef(0.0, 1.4, 0.0);
    glScalef(0.5f, 0.7f, 0.5f);
    glColor3f(1.0, 1.0, 1.0);
    glutSolidCube(0.5);
    glPopMatrix();

    //Orange Head
    glPushMatrix();
    glTranslatef(0.0, 1.9, 0.0);
    glScalef(1.5f, 1.5f, 0.5f);
    glColor3f(1.0, 0.5, 0.2);
    glutSolidCube(0.5);
    glPopMatrix();

   //Left Leg
    glPushMatrix();
    glTranslatef(-0.5, -1.5, 0.0);
    glScalef(1.0f, 3.0f, 0.5f);
    glColor3f(0.5, 0.5, 1.5);
    glutSolidCube(0.5);
    glPopMatrix();

    //Right Leg
    glPushMatrix();
    glTranslatef(0.5, -1.5, 0.0);
    glScalef(1.0f, 3.0f, 0.5f);
    glColor3f(0.5, 0.5, 1.5);
    glutSolidCube(0.5);
    glPopMatrix();
   
    //Red Body
    glPushMatrix();
    glTranslatef(0.0, 0.25, 0.0);
    glScalef(4.0f, 4.0f, 0.5f);
    glColor3f(1.0, 0.0, 0.0);
    glutSolidCube(0.5);
    glPopMatrix();

    //Left hand 
    glPushMatrix();
    glTranslatef(-1.25, 0.5, 0.0);
    glScalef(1.0f, 3.0f, 0.5f);
    glColor3f(1.0, 1.0, 0.0);
    glutSolidCube(0.5);
    glPopMatrix();

    //Right hand
    glPushMatrix();
    glTranslatef(1.25, 0.5, 0.0);
    glScalef(1.0f, 3.0f, 0.5f);
    glColor3f(1.0, 1.0, 0.0);
    glutSolidCube(0.5);
    glPopMatrix();

    //Left armball
    glPushMatrix();
    glTranslatef(-1.25, -0.5, 0.0);
    glScalef(1.0f, 1.5f, 1.0f);
    glColor3f(1.0, 0.5, 0.2);
    GLUquadricObj *sphere; 
    sphere = gluNewQuadric();  
    gluSphere(sphere, 0.25, 50.0, 50.0);
    glPopMatrix();

    //Right Armball
    glPushMatrix();
    glTranslatef(1.25, -0.5, 0.0);
    glScalef(1.0f, 1.5f, 1.0f);
    glColor3f(1.0, 0.5, 0.2);
    GLUquadricObj *sphere1; 
    sphere1 = gluNewQuadric();  
    gluSphere(sphere1, 0.25, 50.0, 50.0);
    glPopMatrix();


    /********** End **********/
    glFlush();
}

void reshape(GLint newWidth, GLint newHeight)
{
     /*viewport transform */
    glViewport(0, 0, newWidth, newHeight);	

    /*projection transformation*/
    glMatrixMode(GL_PROJECTION);

    glLoadIdentity();

    /*Perspective projection, sets the perspective viewer*/
	glFrustum(-1.0, 1.0, -1.0, 1.0, 1.5, 20.0);

    /*model transformation*/
    glMatrixMode(GL_MODELVIEW);
    
    winWidth = newWidth;
    winHeight = newHeight;
}
int main(int argc, char* argv[])
{

    glutInit(&argc, argv);
    glutInitWindowPosition(100, 100);
    glutInitWindowSize( 500 , 500 );        
    glutCreateWindow("Simple robot construction");
    init();
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutMainLoopEvent();





 //The following is the evaluation code, which has nothing to do with the content of this experiment. Please do not modify it
    GLubyte* pPixelData = (GLubyte*)malloc(500 * 500 * 3);
    GLint viewport[4] = { 0 };    
    glReadBuffer(GL_FRONT);
    glPixelStorei(GL_UNPACK_ALIGNMENT, 4);
    glGetIntegerv(GL_VIEWPORT, viewport);
    glReadPixels(viewport[0], viewport[1], viewport[2], viewport[3], GL_RGB, GL_UNSIGNED_BYTE, pPixelData);
    cv::Mat img;
    std::vector<cv::Mat> imgPlanes;
    img.create(500, 500, CV_8UC3);
    cv::split(img, imgPlanes);

    for (int i = 0; i < 500; i++) {
        unsigned char* plane0Ptr = imgPlanes[0].ptr<unsigned char>(i);
        unsigned char* plane1Ptr = imgPlanes[1].ptr<unsigned char>(i);
        unsigned char* plane2Ptr = imgPlanes[2].ptr<unsigned char>(i);
        for (int j = 0; j < 500; j++) {
            int k = 3 * (i * 500 + j);
            plane2Ptr[j] = pPixelData[k];
            plane1Ptr[j] = pPixelData[k + 1];
            plane0Ptr[j] = pPixelData[k + 2];
        }
    }
    cv::merge(imgPlanes, img);
    cv::flip(img, img, 0);
    cv::namedWindow("openglGrab");
    cv::imshow("openglGrab", img);
    cv::imwrite("../img_step2/test.jpg", img);
    return 0;
}
