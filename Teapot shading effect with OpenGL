#include <GL/freeglut.h>
#include<stdlib.h>
// The header file used to evaluate the code - begin
#include<opencv2/core/core.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<opencv2/imgproc/imgproc.hpp>
using namespace std;
// The header file used to evaluate the code - end

// Define the left teapot material factor 
GLfloat left_ambient[] = { 5.0f, 0.0f, 0.0f, 1.0f };
GLfloat left_diffuse[] = { 0.8f, 0.8f, 0.0f, 1.0f };
GLfloat left_specular[] = { 1.0f, 1.0f, 0.0f, 1.0f };
GLfloat left_emission[] = { 0.1f, 0.0f, 0.0f, 1.0f };

// Define the mid teapot material factor 
GLfloat mid_ambient[] = { 0.0f, 0.2f, 0.0f, 1.0f };
GLfloat mid_diffuse[] = { 0.0f, 0.8f, 0.0f, 1.0f };
GLfloat mid_specular[] = { 0.0f, 1.0f, 0.0f, 1.0f };
GLfloat mid_shininess[] = { 80.0f };
GLfloat mid_emission[] = { 0.0f, 0.1f, 0.0f, 1.0f };

// Define the right teapot material factor
GLfloat right_ambient[] = { 0.0f, 0.0f, 0.1f, 1.0f };
GLfloat right_diffuse[] = { 0.0f, 0.0f, 0.8f, 1.0f };
GLfloat right_specular[] = { 0.0f, 0.0f, 0.9f, 1.0f };
GLfloat right_shininess[] = { 50.0f };
GLfloat right_emission[] = { 0.0f, 0.1f, 0.0f, 1.0f };


void myInit(void)
{
   
    GLfloat light_position[] = { 1.0, 1.0, 1.0, 0.0 };
    GLfloat white_light[] = { 1.0, 1.0, 1.0, 1.0 };
    GLfloat light_ambient[] = { 0.2 , 0.2 , 0.2 , 1.0 };


    glClearColor(0.0, 0.0, 0.0, 0.0);
    glShadeModel(GL_SMOOTH);

    //Add light
    glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);
    glLightfv(GL_LIGHT0, GL_POSITION, light_position);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, white_light);
    glLightfv(GL_LIGHT0, GL_SPECULAR, white_light);
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glEnable(GL_DEPTH_TEST); 

}

void myDisplay(void)
{

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glPushMatrix();
    // Please add the code here,mid teapot
    /********** Begin ********/

    glMaterialfv(GL_FRONT, GL_AMBIENT,mid_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mid_diffuse);
    //glMaterialfv(GL_FRONT, GL_SPECULAR, mid_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, mid_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, mid_emission);

    /********** End *********/
    glutSolidTeapot(0.5);
    glPopMatrix();
    glFlush();


    glPushMatrix();
    glTranslatef(2.0,0.0,0.0);
    // Please add the code here,right teapot
    /********** Begin ********/
    glMaterialfv(GL_FRONT, GL_AMBIENT,right_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, right_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, right_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, right_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, right_emission);

    /********** End *********/
    glutSolidTeapot(0.5);
    glPopMatrix();
    glFlush();


    glPushMatrix();
    glDisable(GL_LIGHT0);
    glTranslatef(-2.0,0.0,0.0);
    // Please add the code here,left teapot
    /********** Begin ********/
    glMaterialfv(GL_FRONT, GL_AMBIENT,left_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, left_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, left_specular);
   // glMaterialfv(GL_FRONT, GL_SHININESS, left_shininess);
    glMaterialfv(GL_FRONT, GL_EMISSION, left_emission);
    /********** End *********/
    glutSolidTeapot(0.5);
    glPopMatrix();
    glFlush();

}


void myReshape(int w, int h)
{
    glViewport(0, 0, (GLsizei)w, (GLsizei)h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    if (w <= h)
        glOrtho(-1.5, 1.5, -1.5 * (GLfloat)h / (GLfloat)w,
            1.5 * (GLfloat)h / (GLfloat)w, -10.0, 10.0);
    else
        glOrtho(-1.5 * (GLfloat)w / (GLfloat)h,
            1.5 * (GLfloat)w / (GLfloat)h, -1.5, 1.5, -10.0, 10.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}


int main(int argc, char *argv[])
{

	glutInit(&argc, argv);
	glutInitWindowPosition(100, 100);
	glutInitWindowSize(1000, 400);
	glutCreateWindow("Teapot shading effect");
    myInit();
    glutDisplayFunc(myDisplay);
    glutReshapeFunc(myReshape);
    glutMainLoopEvent();     
     
   //The following is the evaluation code, which has nothing to do with the content of this experiment. Please do not modify it
 	GLubyte* pPixelData = (GLubyte*)malloc(1000 * 400 * 3);
    GLint viewport[4] = {0};
    glReadBuffer(GL_FRONT);
    glPixelStorei(GL_UNPACK_ALIGNMENT, 4);
    glGetIntegerv(GL_VIEWPORT, viewport);
    glReadPixels(viewport[0], viewport[1], viewport[2], viewport[3], GL_RGB, GL_UNSIGNED_BYTE, pPixelData);
    cv::Mat img;
    std::vector<cv::Mat> imgPlanes;
    img.create(400, 1000, CV_8UC3);
    cv::split(img, imgPlanes);

    for (int i = 0; i < 400; i++) {
        unsigned char* plane0Ptr = imgPlanes[0].ptr<unsigned char>(i);
        unsigned char* plane1Ptr = imgPlanes[1].ptr<unsigned char>(i);
        unsigned char* plane2Ptr = imgPlanes[2].ptr<unsigned char>(i);
        for (int j = 0; j < 1000; j++) {
            int k = 3 * (i * 1000 + j);
            plane2Ptr[j] = pPixelData[k];
            plane1Ptr[j] = pPixelData[k + 1];
            plane0Ptr[j] = pPixelData[k + 2];
        }
    }
    cv::merge(imgPlanes, img);
    cv::flip(img, img, 0);
    cv::namedWindow("openglGrab");
    cv::imshow("openglGrab", img);
    //cv::waitKey();
    cv::imwrite("../img_step2/test.jpg", img);
    return 0;
}
