#include <GL/freeglut.h>
#include<stdio.h>

// The header file used to evaluate the code - begin
#include<opencv2/core/core.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<opencv2/imgproc/imgproc.hpp>
// The header file used to evaluate the code - end

GLint winWidth = 400, winHeight = 400; 	      //Sets the initialization window size

/*Observe the coordinate system parameter Settings*/
GLfloat x0 = 4 ,yy = 2, z0 = 8;	   
GLfloat xref = 0.0, yref = 0.0, zref = 0.0;	
GLfloat Vx = 0.0, Vy = 5.0, Vz = 0.0;	   


void init(void)
{
    glClearColor(0.0, 0.0, 0.0, 0.0);
}

void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT);
    glLoadIdentity();
    /* Observe the coordinate system parameter Settings  */
    gluLookAt(x0, yy, z0, xref, yref, zref, Vx, Vy, Vz);       
    // Please add your code here
    /********** Begin ********/
    
    /***Draw the orange cube below***/
    glPushMatrix();
    glColor3f(1.5,0.5,0);
    glTranslatef(0.0f,-0.7f,0.0f);
    glScalef(5.0,0.4,5.0);
    glutSolidCube(1.0);
    glColor3f(0.0,0.0,0.0);
    glutWireCube(1.0);
    glPopMatrix();


    /***************************************/
    /***Please draws a blue unit cube entity***/

    glPushMatrix();
    glColor3f(0.0,1.0,1.0);
    glutSolidCube(1.0);
    glColor3f(0.0,0.0,0.0);
    glutWireCube(1.0);
    glPopMatrix();

    /***************************************/
    /********** End **********/
    glFlush();
}

void reshape(GLint newWidth, GLint newHeight)
{
    /*viewport transform */
    glViewport(0, 0, newWidth, newHeight);	//Sets the initialization window size

    /*projection transformation*/
    glMatrixMode(GL_PROJECTION);

    glLoadIdentity();

    /*Perspective projection,sets the perspective viewer*/

    gluPerspective(50, 1, 1, 100);
    /*model transformation*/
    glMatrixMode(GL_MODELVIEW);

    winWidth = newWidth;
    winHeight = newHeight;
}
int main(int argc, char* argv[])
{

    glutInit(&argc, argv);
    glutInitWindowPosition(100, 100);
    glutInitWindowSize(400, 400);        
    glutCreateWindow("3D Geometric Transformation");
    init();
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutMainLoopEvent();





    //The following is the evaluation code, which has nothing to do with the content of this experiment. Please do not modify it
    GLubyte* pPixelData = (GLubyte*)malloc(800 * 400 * 3);
    GLint viewport[4] = { 0 };
    glReadBuffer(GL_FRONT);
    glPixelStorei(GL_UNPACK_ALIGNMENT, 4);
    glGetIntegerv(GL_VIEWPORT, viewport);
    glReadPixels(viewport[0], viewport[1], viewport[2], viewport[3], GL_RGB, GL_UNSIGNED_BYTE, pPixelData);
    cv::Mat img;
    std::vector<cv::Mat> imgPlanes;
    img.create(400, 400, CV_8UC3);
    cv::split(img, imgPlanes);

    for (int i = 0; i < 400; i++) {
        unsigned char* plane0Ptr = imgPlanes[0].ptr<unsigned char>(i);
        unsigned char* plane1Ptr = imgPlanes[1].ptr<unsigned char>(i);
        unsigned char* plane2Ptr = imgPlanes[2].ptr<unsigned char>(i);
        for (int j = 0; j < 400; j++) {
            int k = 3 * (i * 400 + j);
            plane2Ptr[j] = pPixelData[k];
            plane1Ptr[j] = pPixelData[k + 1];
            plane0Ptr[j] = pPixelData[k + 2];
        }
    }
    cv::merge(imgPlanes, img);
    cv::flip(img, img, 0);
    cv::namedWindow("openglGrab");
    cv::imshow("openglGrab", img);
    //cv::waitKey();
    cv::imwrite("../img_step1/test.jpg", img);
    return 0;
}
